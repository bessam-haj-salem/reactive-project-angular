{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport * as i1 from '@rx-angular/cdk/render-strategies';\nimport { strategyHandling } from '@rx-angular/cdk/render-strategies';\nimport { createTemplateNotifier } from '@rx-angular/cdk/notifications';\nimport { Subscription, Observable } from 'rxjs';\nimport { filter, shareReplay, switchMap, skip, tap, withLatestFrom } from 'rxjs/operators';\n/**\n * @Pipe PushPipe\n *\n * @description\n *\n * The push pipe serves as a drop-in replacement for angulars built-in async pipe.\n * Just like the *rxLet Directive, it leverages a\n * [RenderStrategy](https://rx-angular.io/docs/cdk/render-strategies)\n *   under the hood which takes care of optimizing the ChangeDetection of your component. The rendering behavior can be\n *   configured per PushPipe instance using either a strategy name or provide a\n * `RxComponentInput` config.\n *\n * Usage in the template\n *\n * ```html\n * <hero-search [term]=\"searchTerm$ | push\"> </hero-search>\n * <hero-list-component [heroes]=\"heroes$ | push\"> </hero-list-component>\n * ```\n *\n * Using different strategies\n *\n * ```html\n * <hero-search [term]=\"searchTerm$ | push: 'immediate'\"> </hero-search>\n * <hero-list-component [heroes]=\"heroes$ | push: 'normal'\"> </hero-list-component>\n * ```\n *\n * Provide a config object\n *\n * ```html\n * <hero-search [term]=\"searchTerm$ | push: { strategy: 'immediate' }\"> </hero-search>\n * <hero-list-component [heroes]=\"heroes$ | push: { strategy: 'normal' }\"> </hero-list-component>\n * ```\n *\n * Other Features:\n *\n * - lazy rendering (see\n *  [LetDirective](https://github.com/rx-angular/rx-angular/tree/main/libs/template/docs/api/let-directive.md))\n * - Take observables or promises, retrieve their values and render the value to the template\n * - a unified/structured way of handling null, undefined or error\n * - distinct same values in a row skip not needed re-renderings\n *\n * @usageNotes\n *\n * ```html\n * {{observable$ | push}}\n * <ng-container *ngIf=\"observable$ | push as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | push\"></component>\n * ```\n *\n * @publicApi\n */\n\nclass PushPipe {\n  constructor(strategyProvider, cdRef, ngZone) {\n    this.strategyProvider = strategyProvider;\n    this.cdRef = cdRef;\n    this.ngZone = ngZone;\n    /** @internal */\n\n    this.templateObserver = createTemplateNotifier();\n    this.templateValues$ = this.templateObserver.values$.pipe(onlyValues(), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    /** @internal */\n\n    this.strategyHandler = strategyHandling(this.strategyProvider.primaryStrategy, this.strategyProvider.strategies);\n  }\n\n  transform(potentialObservable, config, renderCallback) {\n    this._renderCallback = renderCallback;\n\n    if (config) {\n      if (isRxComponentInput(config)) {\n        this.strategyHandler.next(config.strategy);\n        this._renderCallback = config.renderCallback; // set fallback if patchZone is not set\n\n        this.setPatchZone(config.patchZone);\n      } else {\n        this.strategyHandler.next(config);\n      }\n    }\n\n    this.templateObserver.next(potentialObservable);\n\n    if (!this.subscription) {\n      this.subscription = this.handleChangeDetection();\n    }\n\n    return this.renderedValue;\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    var _a;\n\n    (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n  /** @internal */\n\n\n  setPatchZone(patch) {\n    const doPatch = patch == null ? this.strategyProvider.config.patchZone : patch;\n    this.patchZone = doPatch ? this.ngZone : false;\n  }\n  /** @internal */\n\n\n  handleChangeDetection() {\n    const scope = this.cdRef.context;\n    const sub = new Subscription();\n    const setRenderedValue = this.templateValues$.subscribe(({\n      value\n    }) => {\n      this.renderedValue = value;\n    });\n    const render = this.hasInitialValue(this.templateValues$).pipe(switchMap(isSync => this.templateValues$.pipe( // skip ticking change detection\n    // in case we have an initial value, we don't need to perform cd\n    // the variable will be evaluated anyway because of the lifecycle\n    skip(isSync ? 1 : 0), // onlyValues(),\n    this.render(scope), tap(v => {\n      var _a;\n\n      (_a = this._renderCallback) === null || _a === void 0 ? void 0 : _a.next(v);\n    })))).subscribe();\n    sub.add(setRenderedValue);\n    sub.add(render);\n    return sub;\n  }\n  /** @internal */\n\n\n  render(scope) {\n    return o$ => o$.pipe(withLatestFrom(this.strategyHandler.strategy$), switchMap(([notification, strategy]) => this.strategyProvider.schedule(() => {\n      strategy.work(this.cdRef, scope);\n      return notification.value;\n    }, {\n      scope,\n      strategy: strategy.name,\n      patchZone: this.patchZone\n    })));\n  }\n  /** @internal */\n\n\n  hasInitialValue(value$) {\n    return new Observable(subscriber => {\n      let hasInitialValue = false;\n      const inner = value$.subscribe(() => {\n        hasInitialValue = true;\n      });\n      inner.unsubscribe();\n      subscriber.next(hasInitialValue);\n      subscriber.complete();\n    });\n  }\n\n}\n/** @nocollapse */\n\n\nPushPipe.ɵfac = function PushPipe_Factory(t) {\n  return new (t || PushPipe)(i0.ɵɵdirectiveInject(i1.RxStrategyProvider, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16), i0.ɵɵdirectiveInject(i0.NgZone, 16));\n};\n/** @nocollapse */\n\n\nPushPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"push\",\n  type: PushPipe,\n  pure: false\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PushPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'push',\n      pure: false\n    }]\n  }], function () {\n    return [{\n      type: i1.RxStrategyProvider\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})(); // https://eslint.org/docs/rules/no-prototype-builtins\n\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction onlyValues() {\n  return o$ => o$.pipe(filter(n => n.kind === \"suspense\"\n  /* Suspense */\n  || n.kind === \"next\"\n  /* Next */\n  ));\n}\n\nfunction isRxComponentInput(value) {\n  return value != null && (hasOwnProperty.call(value, 'strategy') || hasOwnProperty.call(value, 'renderCallback') || hasOwnProperty.call(value, 'patchZone'));\n}\n\nclass PushModule {}\n/** @nocollapse */\n\n\nPushModule.ɵfac = function PushModule_Factory(t) {\n  return new (t || PushModule)();\n};\n/** @nocollapse */\n\n\nPushModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PushModule\n});\n/** @nocollapse */\n\nPushModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PushModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [PushPipe],\n      exports: [PushPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PushModule, PushPipe };","map":{"version":3,"names":["i0","Pipe","NgModule","i1","strategyHandling","createTemplateNotifier","Subscription","Observable","filter","shareReplay","switchMap","skip","tap","withLatestFrom","PushPipe","constructor","strategyProvider","cdRef","ngZone","templateObserver","templateValues$","values$","pipe","onlyValues","bufferSize","refCount","strategyHandler","primaryStrategy","strategies","transform","potentialObservable","config","renderCallback","_renderCallback","isRxComponentInput","next","strategy","setPatchZone","patchZone","subscription","handleChangeDetection","renderedValue","ngOnDestroy","_a","unsubscribe","patch","doPatch","scope","context","sub","setRenderedValue","subscribe","value","render","hasInitialValue","isSync","v","add","o$","strategy$","notification","schedule","work","name","value$","subscriber","inner","complete","ɵfac","RxStrategyProvider","ChangeDetectorRef","NgZone","ɵpipe","type","args","pure","hasOwnProperty","Object","prototype","n","kind","call","PushModule","ɵmod","ɵinj","declarations","exports"],"sources":["/home/bessam/Documents/Medisail/angular/angular interview/reactive-project-angular/node_modules/@rx-angular/template/fesm2015/template-push.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, NgModule } from '@angular/core';\nimport * as i1 from '@rx-angular/cdk/render-strategies';\nimport { strategyHandling } from '@rx-angular/cdk/render-strategies';\nimport { createTemplateNotifier } from '@rx-angular/cdk/notifications';\nimport { Subscription, Observable } from 'rxjs';\nimport { filter, shareReplay, switchMap, skip, tap, withLatestFrom } from 'rxjs/operators';\n\n/**\n * @Pipe PushPipe\n *\n * @description\n *\n * The push pipe serves as a drop-in replacement for angulars built-in async pipe.\n * Just like the *rxLet Directive, it leverages a\n * [RenderStrategy](https://rx-angular.io/docs/cdk/render-strategies)\n *   under the hood which takes care of optimizing the ChangeDetection of your component. The rendering behavior can be\n *   configured per PushPipe instance using either a strategy name or provide a\n * `RxComponentInput` config.\n *\n * Usage in the template\n *\n * ```html\n * <hero-search [term]=\"searchTerm$ | push\"> </hero-search>\n * <hero-list-component [heroes]=\"heroes$ | push\"> </hero-list-component>\n * ```\n *\n * Using different strategies\n *\n * ```html\n * <hero-search [term]=\"searchTerm$ | push: 'immediate'\"> </hero-search>\n * <hero-list-component [heroes]=\"heroes$ | push: 'normal'\"> </hero-list-component>\n * ```\n *\n * Provide a config object\n *\n * ```html\n * <hero-search [term]=\"searchTerm$ | push: { strategy: 'immediate' }\"> </hero-search>\n * <hero-list-component [heroes]=\"heroes$ | push: { strategy: 'normal' }\"> </hero-list-component>\n * ```\n *\n * Other Features:\n *\n * - lazy rendering (see\n *  [LetDirective](https://github.com/rx-angular/rx-angular/tree/main/libs/template/docs/api/let-directive.md))\n * - Take observables or promises, retrieve their values and render the value to the template\n * - a unified/structured way of handling null, undefined or error\n * - distinct same values in a row skip not needed re-renderings\n *\n * @usageNotes\n *\n * ```html\n * {{observable$ | push}}\n * <ng-container *ngIf=\"observable$ | push as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | push\"></component>\n * ```\n *\n * @publicApi\n */\nclass PushPipe {\n    constructor(strategyProvider, cdRef, ngZone) {\n        this.strategyProvider = strategyProvider;\n        this.cdRef = cdRef;\n        this.ngZone = ngZone;\n        /** @internal */\n        this.templateObserver = createTemplateNotifier();\n        this.templateValues$ = this.templateObserver.values$.pipe(onlyValues(), shareReplay({ bufferSize: 1, refCount: true }));\n        /** @internal */\n        this.strategyHandler = strategyHandling(this.strategyProvider.primaryStrategy, this.strategyProvider.strategies);\n    }\n    transform(potentialObservable, config, renderCallback) {\n        this._renderCallback = renderCallback;\n        if (config) {\n            if (isRxComponentInput(config)) {\n                this.strategyHandler.next(config.strategy);\n                this._renderCallback = config.renderCallback;\n                // set fallback if patchZone is not set\n                this.setPatchZone(config.patchZone);\n            }\n            else {\n                this.strategyHandler.next(config);\n            }\n        }\n        this.templateObserver.next(potentialObservable);\n        if (!this.subscription) {\n            this.subscription = this.handleChangeDetection();\n        }\n        return this.renderedValue;\n    }\n    /** @internal */\n    ngOnDestroy() {\n        var _a;\n        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n    /** @internal */\n    setPatchZone(patch) {\n        const doPatch = patch == null ? this.strategyProvider.config.patchZone : patch;\n        this.patchZone = doPatch ? this.ngZone : false;\n    }\n    /** @internal */\n    handleChangeDetection() {\n        const scope = this.cdRef.context;\n        const sub = new Subscription();\n        const setRenderedValue = this.templateValues$.subscribe(({ value }) => {\n            this.renderedValue = value;\n        });\n        const render = this.hasInitialValue(this.templateValues$)\n            .pipe(switchMap((isSync) => this.templateValues$.pipe(\n        // skip ticking change detection\n        // in case we have an initial value, we don't need to perform cd\n        // the variable will be evaluated anyway because of the lifecycle\n        skip(isSync ? 1 : 0), \n        // onlyValues(),\n        this.render(scope), tap((v) => {\n            var _a;\n            (_a = this._renderCallback) === null || _a === void 0 ? void 0 : _a.next(v);\n        }))))\n            .subscribe();\n        sub.add(setRenderedValue);\n        sub.add(render);\n        return sub;\n    }\n    /** @internal */\n    render(scope) {\n        return (o$) => o$.pipe(withLatestFrom(this.strategyHandler.strategy$), switchMap(([notification, strategy]) => this.strategyProvider.schedule(() => {\n            strategy.work(this.cdRef, scope);\n            return notification.value;\n        }, {\n            scope,\n            strategy: strategy.name,\n            patchZone: this.patchZone,\n        })));\n    }\n    /** @internal */\n    hasInitialValue(value$) {\n        return new Observable((subscriber) => {\n            let hasInitialValue = false;\n            const inner = value$.subscribe(() => {\n                hasInitialValue = true;\n            });\n            inner.unsubscribe();\n            subscriber.next(hasInitialValue);\n            subscriber.complete();\n        });\n    }\n}\n/** @nocollapse */ PushPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PushPipe, deps: [{ token: i1.RxStrategyProvider }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Pipe });\n/** @nocollapse */ PushPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PushPipe, name: \"push\", pure: false });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PushPipe, decorators: [{\n            type: Pipe,\n            args: [{ name: 'push', pure: false }]\n        }], ctorParameters: function () { return [{ type: i1.RxStrategyProvider }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; } });\n// https://eslint.org/docs/rules/no-prototype-builtins\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction onlyValues() {\n    return (o$) => o$.pipe(filter((n) => n.kind === \"suspense\" /* Suspense */ ||\n        n.kind === \"next\" /* Next */));\n}\nfunction isRxComponentInput(value) {\n    return (value != null &&\n        (hasOwnProperty.call(value, 'strategy') ||\n            hasOwnProperty.call(value, 'renderCallback') ||\n            hasOwnProperty.call(value, 'patchZone')));\n}\n\nclass PushModule {\n}\n/** @nocollapse */ PushModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PushModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ PushModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PushModule, declarations: [PushPipe], exports: [PushPipe] });\n/** @nocollapse */ PushModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PushModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: PushModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PushPipe],\n                    exports: [PushPipe],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PushModule, PushPipe };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}