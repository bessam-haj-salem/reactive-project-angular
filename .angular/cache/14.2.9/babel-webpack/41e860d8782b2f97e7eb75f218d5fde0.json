{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { coerceObservableWith, coerceDistinctWith } from '@rx-angular/cdk/coercing';\nimport * as i1 from '@rx-angular/cdk/render-strategies';\nimport { RxDefaultListViewContext, createListTemplateManager } from '@rx-angular/cdk/template';\nimport { ReplaySubject, Subscription, isObservable } from 'rxjs';\nimport { switchAll, shareReplay } from 'rxjs/operators';\n\nclass RxForViewContext extends RxDefaultListViewContext {\n  constructor(item, rxForOf, customProps) {\n    super(item, customProps);\n    this.rxForOf = rxForOf;\n  }\n\n}\n/**\n * @Directive RxFor\n *\n * @description\n *\n * The most common way to render lists in angular is by using the `*ngFor` structural directive. `*ngFor` is able\n * to take an arbitrary list of data and repeat a defined template per item of the list. However, it can\n * only do it synchronously.\n *\n * Compared to the `NgFor`, `RxFor` treats each child template as single renderable unit.\n * The change detection of the child templates get prioritized, scheduled and executed by\n * leveraging `RenderStrategies` under the hood.\n * This technique enables non-blocking rendering of lists and can be referred to as `concurrent mode`.\n *\n * Read more about this in the [strategies\n * section](https://www.rx-angular.io/docs/template/api/rx-for-directive#rxfor-with-concurrent-strategies).\n *\n * Furthermore, `RxFor` provides hooks to react to rendered items in form of a `renderCallback: Subject`.\n *\n * Together with the `RxRenderStrategies`, this makes the rendering behavior extremely versatile\n * and transparent for the developer.\n * Each instance of `RxFor` can be configured to render with different settings.\n *\n * Read more in the [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive)\n *\n * @docsCategory RxFor\n * @docsPage RxFor\n * @publicApi\n */\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nclass RxFor {\n  /** @internal */\n  constructor(iterableDiffers, cdRef, ngZone, eRef, templateRef, viewContainerRef, strategyProvider, errorHandler) {\n    this.iterableDiffers = iterableDiffers;\n    this.cdRef = cdRef;\n    this.ngZone = ngZone;\n    this.eRef = eRef;\n    this.templateRef = templateRef;\n    this.viewContainerRef = viewContainerRef;\n    this.strategyProvider = strategyProvider;\n    this.errorHandler = errorHandler;\n    /** @internal */\n\n    this.renderStatic = false;\n    /**\n     * @description\n     *\n     * When local rendering strategies are used, we need to treat view and content queries in a\n     * special way.\n     * To make `*rxFor` in such situations, a certain mechanism is implemented to\n     * execute change detection on the parent (`parent`).\n     *\n     * This is required if your components state is dependent on its view or content children:\n     *\n     * - `@ViewChild`\n     * - `@ViewChildren`\n     * - `@ContentChild`\n     * - `@ContentChildren`\n     *\n     * Read more about this in the\n     * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#local-strategies-and-view-content-queries-parent).\n     *\n     * @example\n     * \\@Component({\n     *   selector: 'app-root',\n     *   template: `\n     *    <app-list-component>\n     *      <app-list-item\n     *        *rxFor=\"\n     *          let item of items$;\n     *          trackBy: trackItem;\n     *          parent: true;\n     *        \"\n     *      >\n     *        <div>{{ item.name }}</div>\n     *      </app-list-item>\n     *    </app-list-component>\n     *   `\n     * })\n     * export class AppComponent {\n     *   items$ = itemService.getItems();\n     * }\n     *\n     * @param {boolean} renderParent\n     */\n\n    this.renderParent = this.strategyProvider.config.parent;\n    /**\n     * @description\n     *\n     * A flag to control whether *rxFor templates are created within `NgZone` or not.\n     * The default value is `true, `*rxFor` will create it's `EmbeddedViews` inside `NgZone`.\n     *\n     * Event listeners normally trigger zone. Especially high frequently events cause performance issues.\n     *\n     * Read more about this in the\n     * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#working-with-event-listeners-patchzone).\n     *\n     * @example\n     * \\@Component({\n     *   selector: 'app-root',\n     *   template: `\n     *    <app-list-component>\n     *      <app-list-item\n     *        *rxFor=\"\n     *          let item of items$;\n     *          trackBy: trackItem;\n     *          patchZone: false;\n     *        \"\n     *      >\n     *        <div>{{ item.name }}</div>\n     *      </app-list-item>\n     *    </app-list-component>\n     *   `\n     * })\n     * export class AppComponent {\n     *   items$ = itemService.getItems();\n     * }\n     *\n     * @param {boolean} patchZone\n     */\n\n    this.patchZone = this.strategyProvider.config.patchZone;\n    /** @internal */\n\n    this.strategyInput$ = new ReplaySubject(1);\n    /** @internal */\n\n    this.observables$ = new ReplaySubject(1);\n    /** @internal */\n\n    this.values$ = this.observables$.pipe(coerceObservableWith(), switchAll(), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n    /** @internal */\n\n    this.values = null;\n    /** @internal */\n\n    this.strategy$ = this.strategyInput$.pipe(coerceDistinctWith());\n    /** @internal */\n\n    this._subscription = new Subscription();\n    /** @internal */\n\n    this._distinctBy = (a, b) => a === b;\n  }\n  /**\n   * @description\n   * The iterable input\n   *\n   * @example\n   * <ng-container *rxFor=\"heroes$; let hero\">\n   *   <app-hero [hero]=\"hero\"></app-hero>\n   * </ng-container>\n   *\n   * @param { Observable<(U & NgIterable<T>) | undefined | null>\n   *       | (U & NgIterable<T>)\n   *       | null\n   *       | undefined } potentialObservable\n   */\n\n\n  set rxForOf(potentialObservable) {\n    if (!isObservable(potentialObservable)) {\n      this.staticValue = potentialObservable;\n      this.renderStatic = true;\n    } else {\n      this.staticValue = undefined;\n      this.renderStatic = false;\n      this.observables$.next(potentialObservable);\n    }\n  }\n\n  set rxForTemplate(value) {\n    this._template = value;\n  }\n  /**\n   * @description\n   *\n   * You can change the used `RenderStrategy` by using the `strategy` input of the `*rxFor`. It accepts\n   * an `Observable<RxStrategyNames>` or [`RxStrategyNames`](https://github.com/rx-angular/rx-angular/blob/b0630f69017cc1871d093e976006066d5f2005b9/libs/cdk/render-strategies/src/lib/model.ts#L52).\n   *\n   * The default value for strategy is\n   * [`normal`](https://www.rx-angular.io/docs/template/cdk/render-strategies/strategies/concurrent-strategies).\n   *\n   * Read more about this in the\n   * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#use-render-strategies-strategy).\n   *\n   * @example\n   *\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *     <ng-container *rxFor=\"let hero of heroes$; strategy: strategy\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *\n   *     <ng-container *rxFor=\"let hero of heroes$; strategy: strategy$\">\n   *       <app-hero [hero]=\"hero\"></app-hero>\n   *     </ng-container>\n   *   `\n   * })\n   * export class AppComponent {\n   *   strategy = 'low';\n   *   strategy$ = of('immediate');\n   * }\n   *\n   * @param {string | Observable<string> | undefined} strategyName\n   * @see {@link strategies}\n   */\n\n\n  set rxForStrategy(strategyName) {\n    this.strategyInput$.next(strategyName);\n  }\n  /**\n   * @description\n   * A function or key that defines how to track changes for items in the iterable.\n   *\n   * When items are added, moved, or removed in the iterable,\n   * the directive must re-render the appropriate DOM nodes.\n   * To minimize churn in the DOM, only nodes that have changed\n   * are re-rendered.\n   *\n   * By default, rxFor assumes that the object instance identifies the node in the iterable (equality check `===`).\n   * When a function or key is supplied, rxFor uses the result to identify the item node.\n   *\n   * @example\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *    <app-list-component>\n   *      <app-list-item\n   *        *rxFor=\"\n   *          let item of items$;\n   *          trackBy: 'id';\n   *        \"\n   *      >\n   *        <div>{{ item.name }}</div>\n   *      </app-list-item>\n   *    </app-list-component>\n   *   `\n   * })\n   * export class AppComponent {\n   *   items$ = itemService.getItems();\n   * }\n   *\n   * // OR\n   *\n   * \\@Component({\n   *   selector: 'app-root',\n   *   template: `\n   *    <app-list-component>\n   *      <app-list-item\n   *        *rxFor=\"\n   *          let item of items$;\n   *          trackBy: trackItem;\n   *        \"\n   *      >\n   *        <div>{{ item.name }}</div>\n   *      </app-list-item>\n   *    </app-list-component>\n   *   `\n   * })\n   * export class AppComponent {\n   *   items$ = itemService.getItems();\n   *   trackItem = (idx, item) => item.id;\n   * }\n   *\n   * @param trackByFnOrKey\n   */\n\n\n  set trackBy(trackByFnOrKey) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && trackByFnOrKey != null && typeof trackByFnOrKey !== 'string' && typeof trackByFnOrKey !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(trackByFnOrKey)}.`);\n    }\n\n    if (trackByFnOrKey == null) {\n      this._trackBy = null;\n    } else {\n      this._trackBy = typeof trackByFnOrKey !== 'function' ? (i, a) => a[trackByFnOrKey] : trackByFnOrKey;\n    }\n  }\n  /**\n   * @description\n   * A `Subject` which emits whenever *rxFor finished rendering a set changes to the view.\n   * This enables developers to perform actions when a list has finished rendering.\n   * The `renderCallback` is useful in situations where you rely on specific DOM properties like the `height` a\n   * table after all items got rendered.\n   * It is also possible to use the renderCallback in order to determine if a view should be visible or not. This\n   * way developers can hide a list as long as it has not finished rendering.\n   *\n   * The result of the `renderCallback` will contain the currently rendered set of items in the iterable.\n   *\n   * @example\n   * \\Component({\n   *   selector: 'app-root',\n   *   template: `\n   *   <app-list-component>\n   *     <app-list-item\n   *       *rxFor=\"\n   *         let item of items$;\n   *         trackBy: trackItem;\n   *         renderCallback: itemsRendered;\n   *       \">\n   *       <div>{{ item.name }}</div>\n   *     </app-list-item>\n   *   </app-list-component>\n   * `\n   * })\n   * export class AppComponent {\n   *   items$: Observable<Item[]> = itemService.getItems();\n   *   trackItem = (idx, item) => item.id;\n   *   // this emits whenever rxFor finished rendering changes\n   *   itemsRendered = new Subject<Item[]>();\n   *\n   *   constructor(elementRef: ElementRef<HTMLElement>) {\n   *     itemsRendered.subscribe(() => {\n   *       // items are rendered, we can now scroll\n   *       elementRef.scrollTo({bottom: 0});\n   *     })\n   *   }\n   * }\n   *\n   * @param {Subject<U>} renderCallback\n   */\n\n\n  set renderCallback(renderCallback) {\n    this._renderCallback = renderCallback;\n  }\n\n  get template() {\n    return this._template || this.templateRef;\n  }\n  /** @internal */\n\n\n  ngOnInit() {\n    this._subscription.add(this.values$.subscribe(v => this.values = v));\n\n    this.listManager = createListTemplateManager({\n      iterableDiffers: this.iterableDiffers,\n      renderSettings: {\n        cdRef: this.cdRef,\n        strategies: this.strategyProvider.strategies,\n        defaultStrategyName: this.strategyProvider.primaryStrategy,\n        parent: !!this.renderParent,\n        patchZone: this.patchZone ? this.ngZone : false,\n        errorHandler: this.errorHandler\n      },\n      templateSettings: {\n        viewContainerRef: this.viewContainerRef,\n        templateRef: this.template,\n        createViewContext: this.createViewContext.bind(this),\n        updateViewContext: this.updateViewContext.bind(this)\n      },\n      trackBy: this._trackBy\n    });\n    this.listManager.nextStrategy(this.strategy$);\n\n    this._subscription.add(this.listManager.render(this.values$).subscribe(v => {\n      var _a;\n\n      return (_a = this._renderCallback) === null || _a === void 0 ? void 0 : _a.next(v);\n    }));\n  }\n  /** @internal */\n\n\n  createViewContext(item, computedContext) {\n    return new RxForViewContext(item, this.values, computedContext);\n  }\n  /** @internal */\n\n\n  updateViewContext(item, view, computedContext) {\n    view.context.updateContext(computedContext);\n    view.context.rxForOf = this.values;\n    view.context.$implicit = item;\n  }\n  /** @internal */\n\n\n  ngDoCheck() {\n    if (this.renderStatic) {\n      this.observables$.next(this.staticValue);\n    }\n  }\n  /** @internal */\n\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n\n    this.viewContainerRef.clear();\n  }\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n  static ngTemplateContextGuard(dir, ctx) {\n    return true;\n  }\n\n}\n/** @nocollapse */\n\n\nRxFor.ɵfac = function RxFor_Factory(t) {\n  return new (t || RxFor)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.RxStrategyProvider), i0.ɵɵdirectiveInject(i0.ErrorHandler));\n};\n/** @nocollapse */\n\n\nRxFor.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: RxFor,\n  selectors: [[\"\", \"rxFor\", \"\", \"rxForOf\", \"\"]],\n  inputs: {\n    rxForOf: \"rxForOf\",\n    rxForTemplate: \"rxForTemplate\",\n    rxForStrategy: \"rxForStrategy\",\n    renderParent: [\"rxForParent\", \"renderParent\"],\n    patchZone: [\"rxForPatchZone\", \"patchZone\"],\n    trackBy: [\"rxForTrackBy\", \"trackBy\"],\n    renderCallback: [\"rxForRenderCallback\", \"renderCallback\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxFor, [{\n    type: Directive,\n    args: [{\n      selector: '[rxFor][rxForOf]'\n    }]\n  }], function () {\n    return [{\n      type: i0.IterableDiffers\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i1.RxStrategyProvider\n    }, {\n      type: i0.ErrorHandler\n    }];\n  }, {\n    rxForOf: [{\n      type: Input\n    }],\n    rxForTemplate: [{\n      type: Input\n    }],\n    rxForStrategy: [{\n      type: Input\n    }],\n    renderParent: [{\n      type: Input,\n      args: ['rxForParent']\n    }],\n    patchZone: [{\n      type: Input,\n      args: ['rxForPatchZone']\n    }],\n    trackBy: [{\n      type: Input,\n      args: ['rxForTrackBy']\n    }],\n    renderCallback: [{\n      type: Input,\n      args: ['rxForRenderCallback']\n    }]\n  });\n})();\n\nconst DECLARATIONS = [RxFor];\n\nclass ForModule {}\n/** @nocollapse */\n\n\nForModule.ɵfac = function ForModule_Factory(t) {\n  return new (t || ForModule)();\n};\n/** @nocollapse */\n\n\nForModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ForModule\n});\n/** @nocollapse */\n\nForModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ForModule, [{\n    type: NgModule,\n    args: [{\n      declarations: DECLARATIONS,\n      imports: [],\n      exports: DECLARATIONS\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ForModule, RxFor, RxForViewContext };","map":{"version":3,"names":["i0","Directive","Input","NgModule","coerceObservableWith","coerceDistinctWith","i1","RxDefaultListViewContext","createListTemplateManager","ReplaySubject","Subscription","isObservable","switchAll","shareReplay","RxForViewContext","constructor","item","rxForOf","customProps","RxFor","iterableDiffers","cdRef","ngZone","eRef","templateRef","viewContainerRef","strategyProvider","errorHandler","renderStatic","renderParent","config","parent","patchZone","strategyInput$","observables$","values$","pipe","refCount","bufferSize","values","strategy$","_subscription","_distinctBy","a","b","potentialObservable","staticValue","undefined","next","rxForTemplate","value","_template","rxForStrategy","strategyName","trackBy","trackByFnOrKey","ngDevMode","console","warn","JSON","stringify","_trackBy","i","renderCallback","_renderCallback","template","ngOnInit","add","subscribe","v","listManager","renderSettings","strategies","defaultStrategyName","primaryStrategy","templateSettings","createViewContext","bind","updateViewContext","nextStrategy","render","_a","computedContext","view","context","updateContext","$implicit","ngDoCheck","ngOnDestroy","unsubscribe","clear","ngTemplateContextGuard","dir","ctx","ɵfac","IterableDiffers","ChangeDetectorRef","NgZone","ElementRef","TemplateRef","ViewContainerRef","RxStrategyProvider","ErrorHandler","ɵdir","type","args","selector","DECLARATIONS","ForModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["/home/bessam/Documents/Medisail/angular/angular interview/reactive-project-angular/node_modules/@rx-angular/template/fesm2015/template-for.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { coerceObservableWith, coerceDistinctWith } from '@rx-angular/cdk/coercing';\nimport * as i1 from '@rx-angular/cdk/render-strategies';\nimport { RxDefaultListViewContext, createListTemplateManager } from '@rx-angular/cdk/template';\nimport { ReplaySubject, Subscription, isObservable } from 'rxjs';\nimport { switchAll, shareReplay } from 'rxjs/operators';\n\nclass RxForViewContext extends RxDefaultListViewContext {\n    constructor(item, rxForOf, customProps) {\n        super(item, customProps);\n        this.rxForOf = rxForOf;\n    }\n}\n\n/**\n * @Directive RxFor\n *\n * @description\n *\n * The most common way to render lists in angular is by using the `*ngFor` structural directive. `*ngFor` is able\n * to take an arbitrary list of data and repeat a defined template per item of the list. However, it can\n * only do it synchronously.\n *\n * Compared to the `NgFor`, `RxFor` treats each child template as single renderable unit.\n * The change detection of the child templates get prioritized, scheduled and executed by\n * leveraging `RenderStrategies` under the hood.\n * This technique enables non-blocking rendering of lists and can be referred to as `concurrent mode`.\n *\n * Read more about this in the [strategies\n * section](https://www.rx-angular.io/docs/template/api/rx-for-directive#rxfor-with-concurrent-strategies).\n *\n * Furthermore, `RxFor` provides hooks to react to rendered items in form of a `renderCallback: Subject`.\n *\n * Together with the `RxRenderStrategies`, this makes the rendering behavior extremely versatile\n * and transparent for the developer.\n * Each instance of `RxFor` can be configured to render with different settings.\n *\n * Read more in the [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive)\n *\n * @docsCategory RxFor\n * @docsPage RxFor\n * @publicApi\n */\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass RxFor {\n    /** @internal */\n    constructor(iterableDiffers, cdRef, ngZone, eRef, templateRef, viewContainerRef, strategyProvider, errorHandler) {\n        this.iterableDiffers = iterableDiffers;\n        this.cdRef = cdRef;\n        this.ngZone = ngZone;\n        this.eRef = eRef;\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.strategyProvider = strategyProvider;\n        this.errorHandler = errorHandler;\n        /** @internal */\n        this.renderStatic = false;\n        /**\n         * @description\n         *\n         * When local rendering strategies are used, we need to treat view and content queries in a\n         * special way.\n         * To make `*rxFor` in such situations, a certain mechanism is implemented to\n         * execute change detection on the parent (`parent`).\n         *\n         * This is required if your components state is dependent on its view or content children:\n         *\n         * - `@ViewChild`\n         * - `@ViewChildren`\n         * - `@ContentChild`\n         * - `@ContentChildren`\n         *\n         * Read more about this in the\n         * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#local-strategies-and-view-content-queries-parent).\n         *\n         * @example\n         * \\@Component({\n         *   selector: 'app-root',\n         *   template: `\n         *    <app-list-component>\n         *      <app-list-item\n         *        *rxFor=\"\n         *          let item of items$;\n         *          trackBy: trackItem;\n         *          parent: true;\n         *        \"\n         *      >\n         *        <div>{{ item.name }}</div>\n         *      </app-list-item>\n         *    </app-list-component>\n         *   `\n         * })\n         * export class AppComponent {\n         *   items$ = itemService.getItems();\n         * }\n         *\n         * @param {boolean} renderParent\n         */\n        this.renderParent = this.strategyProvider.config.parent;\n        /**\n         * @description\n         *\n         * A flag to control whether *rxFor templates are created within `NgZone` or not.\n         * The default value is `true, `*rxFor` will create it's `EmbeddedViews` inside `NgZone`.\n         *\n         * Event listeners normally trigger zone. Especially high frequently events cause performance issues.\n         *\n         * Read more about this in the\n         * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#working-with-event-listeners-patchzone).\n         *\n         * @example\n         * \\@Component({\n         *   selector: 'app-root',\n         *   template: `\n         *    <app-list-component>\n         *      <app-list-item\n         *        *rxFor=\"\n         *          let item of items$;\n         *          trackBy: trackItem;\n         *          patchZone: false;\n         *        \"\n         *      >\n         *        <div>{{ item.name }}</div>\n         *      </app-list-item>\n         *    </app-list-component>\n         *   `\n         * })\n         * export class AppComponent {\n         *   items$ = itemService.getItems();\n         * }\n         *\n         * @param {boolean} patchZone\n         */\n        this.patchZone = this.strategyProvider.config.patchZone;\n        /** @internal */\n        this.strategyInput$ = new ReplaySubject(1);\n        /** @internal */\n        this.observables$ = new ReplaySubject(1);\n        /** @internal */\n        this.values$ = this.observables$.pipe(coerceObservableWith(), switchAll(), shareReplay({ refCount: true, bufferSize: 1 }));\n        /** @internal */\n        this.values = null;\n        /** @internal */\n        this.strategy$ = this.strategyInput$.pipe(coerceDistinctWith());\n        /** @internal */\n        this._subscription = new Subscription();\n        /** @internal */\n        this._distinctBy = (a, b) => a === b;\n    }\n    /**\n     * @description\n     * The iterable input\n     *\n     * @example\n     * <ng-container *rxFor=\"heroes$; let hero\">\n     *   <app-hero [hero]=\"hero\"></app-hero>\n     * </ng-container>\n     *\n     * @param { Observable<(U & NgIterable<T>) | undefined | null>\n     *       | (U & NgIterable<T>)\n     *       | null\n     *       | undefined } potentialObservable\n     */\n    set rxForOf(potentialObservable) {\n        if (!isObservable(potentialObservable)) {\n            this.staticValue = potentialObservable;\n            this.renderStatic = true;\n        }\n        else {\n            this.staticValue = undefined;\n            this.renderStatic = false;\n            this.observables$.next(potentialObservable);\n        }\n    }\n    set rxForTemplate(value) {\n        this._template = value;\n    }\n    /**\n     * @description\n     *\n     * You can change the used `RenderStrategy` by using the `strategy` input of the `*rxFor`. It accepts\n     * an `Observable<RxStrategyNames>` or [`RxStrategyNames`](https://github.com/rx-angular/rx-angular/blob/b0630f69017cc1871d093e976006066d5f2005b9/libs/cdk/render-strategies/src/lib/model.ts#L52).\n     *\n     * The default value for strategy is\n     * [`normal`](https://www.rx-angular.io/docs/template/cdk/render-strategies/strategies/concurrent-strategies).\n     *\n     * Read more about this in the\n     * [official docs](https://www.rx-angular.io/docs/template/api/rx-for-directive#use-render-strategies-strategy).\n     *\n     * @example\n     *\n     * \\@Component({\n     *   selector: 'app-root',\n     *   template: `\n     *     <ng-container *rxFor=\"let hero of heroes$; strategy: strategy\">\n     *       <app-hero [hero]=\"hero\"></app-hero>\n     *     </ng-container>\n     *\n     *     <ng-container *rxFor=\"let hero of heroes$; strategy: strategy$\">\n     *       <app-hero [hero]=\"hero\"></app-hero>\n     *     </ng-container>\n     *   `\n     * })\n     * export class AppComponent {\n     *   strategy = 'low';\n     *   strategy$ = of('immediate');\n     * }\n     *\n     * @param {string | Observable<string> | undefined} strategyName\n     * @see {@link strategies}\n     */\n    set rxForStrategy(strategyName) {\n        this.strategyInput$.next(strategyName);\n    }\n    /**\n     * @description\n     * A function or key that defines how to track changes for items in the iterable.\n     *\n     * When items are added, moved, or removed in the iterable,\n     * the directive must re-render the appropriate DOM nodes.\n     * To minimize churn in the DOM, only nodes that have changed\n     * are re-rendered.\n     *\n     * By default, rxFor assumes that the object instance identifies the node in the iterable (equality check `===`).\n     * When a function or key is supplied, rxFor uses the result to identify the item node.\n     *\n     * @example\n     * \\@Component({\n     *   selector: 'app-root',\n     *   template: `\n     *    <app-list-component>\n     *      <app-list-item\n     *        *rxFor=\"\n     *          let item of items$;\n     *          trackBy: 'id';\n     *        \"\n     *      >\n     *        <div>{{ item.name }}</div>\n     *      </app-list-item>\n     *    </app-list-component>\n     *   `\n     * })\n     * export class AppComponent {\n     *   items$ = itemService.getItems();\n     * }\n     *\n     * // OR\n     *\n     * \\@Component({\n     *   selector: 'app-root',\n     *   template: `\n     *    <app-list-component>\n     *      <app-list-item\n     *        *rxFor=\"\n     *          let item of items$;\n     *          trackBy: trackItem;\n     *        \"\n     *      >\n     *        <div>{{ item.name }}</div>\n     *      </app-list-item>\n     *    </app-list-component>\n     *   `\n     * })\n     * export class AppComponent {\n     *   items$ = itemService.getItems();\n     *   trackItem = (idx, item) => item.id;\n     * }\n     *\n     * @param trackByFnOrKey\n     */\n    set trackBy(trackByFnOrKey) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            trackByFnOrKey != null &&\n            typeof trackByFnOrKey !== 'string' &&\n            typeof trackByFnOrKey !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(trackByFnOrKey)}.`);\n        }\n        if (trackByFnOrKey == null) {\n            this._trackBy = null;\n        }\n        else {\n            this._trackBy =\n                typeof trackByFnOrKey !== 'function'\n                    ? (i, a) => a[trackByFnOrKey]\n                    : trackByFnOrKey;\n        }\n    }\n    /**\n     * @description\n     * A `Subject` which emits whenever *rxFor finished rendering a set changes to the view.\n     * This enables developers to perform actions when a list has finished rendering.\n     * The `renderCallback` is useful in situations where you rely on specific DOM properties like the `height` a\n     * table after all items got rendered.\n     * It is also possible to use the renderCallback in order to determine if a view should be visible or not. This\n     * way developers can hide a list as long as it has not finished rendering.\n     *\n     * The result of the `renderCallback` will contain the currently rendered set of items in the iterable.\n     *\n     * @example\n     * \\Component({\n     *   selector: 'app-root',\n     *   template: `\n     *   <app-list-component>\n     *     <app-list-item\n     *       *rxFor=\"\n     *         let item of items$;\n     *         trackBy: trackItem;\n     *         renderCallback: itemsRendered;\n     *       \">\n     *       <div>{{ item.name }}</div>\n     *     </app-list-item>\n     *   </app-list-component>\n     * `\n     * })\n     * export class AppComponent {\n     *   items$: Observable<Item[]> = itemService.getItems();\n     *   trackItem = (idx, item) => item.id;\n     *   // this emits whenever rxFor finished rendering changes\n     *   itemsRendered = new Subject<Item[]>();\n     *\n     *   constructor(elementRef: ElementRef<HTMLElement>) {\n     *     itemsRendered.subscribe(() => {\n     *       // items are rendered, we can now scroll\n     *       elementRef.scrollTo({bottom: 0});\n     *     })\n     *   }\n     * }\n     *\n     * @param {Subject<U>} renderCallback\n     */\n    set renderCallback(renderCallback) {\n        this._renderCallback = renderCallback;\n    }\n    get template() {\n        return this._template || this.templateRef;\n    }\n    /** @internal */\n    ngOnInit() {\n        this._subscription.add(this.values$.subscribe((v) => (this.values = v)));\n        this.listManager = createListTemplateManager({\n            iterableDiffers: this.iterableDiffers,\n            renderSettings: {\n                cdRef: this.cdRef,\n                strategies: this.strategyProvider.strategies,\n                defaultStrategyName: this.strategyProvider.primaryStrategy,\n                parent: !!this.renderParent,\n                patchZone: this.patchZone ? this.ngZone : false,\n                errorHandler: this.errorHandler,\n            },\n            templateSettings: {\n                viewContainerRef: this.viewContainerRef,\n                templateRef: this.template,\n                createViewContext: this.createViewContext.bind(this),\n                updateViewContext: this.updateViewContext.bind(this),\n            },\n            trackBy: this._trackBy,\n        });\n        this.listManager.nextStrategy(this.strategy$);\n        this._subscription.add(this.listManager\n            .render(this.values$)\n            .subscribe((v) => { var _a; return (_a = this._renderCallback) === null || _a === void 0 ? void 0 : _a.next(v); }));\n    }\n    /** @internal */\n    createViewContext(item, computedContext) {\n        return new RxForViewContext(item, this.values, computedContext);\n    }\n    /** @internal */\n    updateViewContext(item, view, computedContext) {\n        view.context.updateContext(computedContext);\n        view.context.rxForOf = this.values;\n        view.context.$implicit = item;\n    }\n    /** @internal */\n    ngDoCheck() {\n        if (this.renderStatic) {\n            this.observables$.next(this.staticValue);\n        }\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this.viewContainerRef.clear();\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    static ngTemplateContextGuard(dir, ctx) {\n        return true;\n    }\n}\n/** @nocollapse */ RxFor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: RxFor, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.RxStrategyProvider }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ RxFor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.16\", type: RxFor, selector: \"[rxFor][rxForOf]\", inputs: { rxForOf: \"rxForOf\", rxForTemplate: \"rxForTemplate\", rxForStrategy: \"rxForStrategy\", renderParent: [\"rxForParent\", \"renderParent\"], patchZone: [\"rxForPatchZone\", \"patchZone\"], trackBy: [\"rxForTrackBy\", \"trackBy\"], renderCallback: [\"rxForRenderCallback\", \"renderCallback\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: RxFor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rxFor][rxForOf]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.RxStrategyProvider }, { type: i0.ErrorHandler }]; }, propDecorators: { rxForOf: [{\n                type: Input\n            }], rxForTemplate: [{\n                type: Input\n            }], rxForStrategy: [{\n                type: Input\n            }], renderParent: [{\n                type: Input,\n                args: ['rxForParent']\n            }], patchZone: [{\n                type: Input,\n                args: ['rxForPatchZone']\n            }], trackBy: [{\n                type: Input,\n                args: ['rxForTrackBy']\n            }], renderCallback: [{\n                type: Input,\n                args: ['rxForRenderCallback']\n            }] } });\n\nconst DECLARATIONS = [\n    RxFor\n];\nclass ForModule {\n}\n/** @nocollapse */ ForModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ForModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ForModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ForModule, declarations: [RxFor], exports: [RxFor] });\n/** @nocollapse */ ForModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ForModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: ForModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: DECLARATIONS,\n                    imports: [],\n                    exports: DECLARATIONS\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ForModule, RxFor, RxForViewContext };\n"],"mappings":"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AbI,aAAa,CAACC,KAAD,EAAQ;IACrB,KAAKC,SAAL,GAAiBD,KAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACqB,IAAbE,aAAa,CAACC,YAAD,EAAe;IAC5B,KAAKpB,cAAL,CAAoBe,IAApB,CAAyBK,YAAzB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACe,IAAPC,OAAO,CAACC,cAAD,EAAiB;IACxB,IAAI,CAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KACAD,cAAc,IAAI,IADlB,IAEA,OAAOA,cAAP,KAA0B,QAF1B,IAGA,OAAOA,cAAP,KAA0B,UAH9B,EAG0C;MACtCE,OAAO,CAACC,IAAR,CAAc,4CAA2CC,IAAI,CAACC,SAAL,CAAeL,cAAf,CAA+B,GAAxF;IACH;;IACD,IAAIA,cAAc,IAAI,IAAtB,EAA4B;MACxB,KAAKM,QAAL,GAAgB,IAAhB;IACH,CAFD,MAGK;MACD,KAAKA,QAAL,GACI,OAAON,cAAP,KAA0B,UAA1B,GACM,CAACO,CAAD,EAAInB,CAAJ,KAAUA,CAAC,CAACY,cAAD,CADjB,GAEMA,cAHV;IAIH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module"}