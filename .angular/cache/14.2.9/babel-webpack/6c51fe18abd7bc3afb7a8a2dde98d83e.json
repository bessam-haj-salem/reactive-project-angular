{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgZone, InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, throwError, BehaviorSubject, fromEvent, ReplaySubject } from 'rxjs';\nimport { filter, switchMap, mapTo, tap, catchError, map, take, shareReplay, takeUntil, switchAll, startWith, share } from 'rxjs/operators';\nimport { forceFrameRate, scheduleCallback, cancelCallback } from '@rx-angular/cdk/internals/scheduler';\nimport { coalescingManager, coalesceWith } from '@rx-angular/cdk/coalescing';\nimport { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing'; // set default to 60fps\n\nforceFrameRate(60);\nconst immediateStrategy = {\n  name: 'immediate',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 1\n      /* ImmediatePriority */\n      ,\n      scope\n    }));\n  }\n};\nconst userBlockingStrategy = {\n  name: 'userBlocking',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 2\n      /* UserBlockingPriority */\n      ,\n      scope\n    }));\n  }\n};\nconst normalStrategy = {\n  name: 'normal',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 3\n      /* NormalPriority */\n      ,\n      scope\n    }));\n  }\n};\nconst lowStrategy = {\n  name: 'low',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 4\n      /* LowPriority */\n      ,\n      scope\n    }));\n  }\n};\nconst idleStrategy = {\n  name: 'idle',\n  work: cdRef => cdRef.detectChanges(),\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => {\n    return o$ => o$.pipe(scheduleOnQueue(work, {\n      ngZone,\n      priority: 5\n      /* IdlePriority */\n      ,\n      scope\n    }));\n  }\n};\n\nfunction scheduleOnQueue(work, options) {\n  const scope = options.scope || {};\n  return o$ => o$.pipe(filter(() => !coalescingManager.isCoalescing(scope)), switchMap(v => new Observable(subscriber => {\n    coalescingManager.add(scope);\n    const task = scheduleCallback(options.priority, () => {\n      work();\n      coalescingManager.remove(scope);\n      subscriber.next(v);\n    }, {\n      delay: options.delay,\n      ngZone: options.ngZone\n    });\n    return () => {\n      coalescingManager.remove(scope);\n      cancelCallback(task);\n    };\n  }).pipe(mapTo(v))));\n}\n\nconst RX_CONCURRENT_STRATEGIES = {\n  immediate: immediateStrategy,\n  userBlocking: userBlockingStrategy,\n  normal: normalStrategy,\n  low: lowStrategy,\n  idle: idleStrategy\n};\n\nconst animationFrameTick = () => new Observable(subscriber => {\n  // use the unpatched API no avoid zone interference\n  const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {\n    subscriber.next(0);\n    subscriber.complete();\n  });\n  return () => {\n    // use the unpatched API no avoid zone interference\n    getZoneUnPatchedApi('cancelAnimationFrame')(id);\n  };\n});\n\nconst localCredentials = {\n  name: 'local',\n  work: (cdRef, _, notification) => {\n    cdRef.detectChanges();\n  },\n  behavior: ({\n    work,\n    scope,\n    ngZone\n  }) => o$ => o$.pipe(coalesceWith(animationFrameTick(), scope), tap(() => ngZone ? ngZone.run(() => work()) : work()))\n};\nconst noopCredentials = {\n  name: 'noop',\n  work: () => void 0,\n  behavior: () => o$ => o$\n};\nconst nativeCredentials = {\n  name: 'native',\n  work: cdRef => cdRef.markForCheck(),\n  behavior: ({\n    work,\n    ngZone\n  }) => o$ => o$.pipe(tap(() => ngZone && !NgZone.isInAngularZone() ? ngZone.run(() => work()) : work()))\n};\n/**\n * @deprecated\n * angular drops the internal markDirty API, will fall back to native if used\n */\n\nconst globalCredentials = Object.assign(Object.assign({}, nativeCredentials), {\n  name: 'global'\n});\nconst RX_NATIVE_STRATEGIES = {\n  global: globalCredentials,\n  native: nativeCredentials,\n  noop: noopCredentials,\n  local: localCredentials\n};\nconst RX_RENDER_STRATEGIES_CONFIG = new InjectionToken('rxa-render-strategies-config');\nconst RX_RENDER_STRATEGIES_DEFAULTS = {\n  primaryStrategy: 'normal',\n  customStrategies: Object.assign(Object.assign({}, RX_NATIVE_STRATEGIES), RX_CONCURRENT_STRATEGIES),\n  patchZone: true,\n  parent: true\n};\n\nfunction mergeDefaultConfig(cfg) {\n  const custom = cfg ? cfg : {\n    customStrategies: {}\n  };\n  return Object.assign(Object.assign(Object.assign({}, RX_RENDER_STRATEGIES_DEFAULTS), custom), {\n    customStrategies: Object.assign(Object.assign({}, custom.customStrategies), RX_RENDER_STRATEGIES_DEFAULTS.customStrategies)\n  });\n}\n/**\n * @internal\n *\n * @param value\n * @param strategy\n * @param workFactory\n * @param options\n */\n\n\nfunction onStrategy(value, strategy, workFactory, options = {}) {\n  return new Observable(subscriber => {\n    subscriber.next(value);\n  }).pipe(strategy.behavior({\n    work: () => workFactory(value, strategy.work, options),\n    scope: options.scope || {},\n    ngZone: options.ngZone\n  }), catchError(error => throwError(() => [error, value])), map(() => value), take(1));\n}\n/**\n * @description\n * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.\n *\n * @example\n * Component({\n *   selector: 'app-service-communicator',\n *   template: ``\n * });\n * export class ServiceCommunicationComponent {\n *   private currentUserSettings;\n *\n *   constructor(\n *     private strategyProvider: RxStrategyProvider,\n *     private userService: UserService,\n *     private backgroundSync: BackgroundSyncService\n *   ) {\n *     this.userService.fetchCurrentUserSettings\n *       .pipe(\n *         tap(settings => (this.currentUserSettings = settings)),\n *         this.strategyProvider.scheduleWith(\n *           settings => this.backgroundSync.openConnection(settings),\n *           { strategy: 'idle' }\n *         )\n *       )\n *       .subscribe();\n *   }\n * }\n *\n * @docsCategory RxStrategyProvider\n * @docsPage RxStrategyProvider\n */\n\n\nclass RxStrategyProvider {\n  /**\n   * @internal\n   */\n  constructor(cfg) {\n    this._strategies$ = new BehaviorSubject(undefined);\n    this._primaryStrategy$ = new BehaviorSubject(undefined);\n    /**\n     * @description\n     * Current strategy of the service as an observable.\n     */\n\n    this.primaryStrategy$ = this._primaryStrategy$.asObservable();\n    /**\n     * @description\n     * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n     */\n\n    this.strategies$ = this._strategies$.asObservable();\n    /**\n     * @description\n     * Returns an observable of an array of strategy names available in the service.\n     */\n\n    this.strategyNames$ = this.strategies$.pipe(map(strategies => Object.values(strategies).map(s => s.name)), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this._cfg = mergeDefaultConfig(cfg);\n\n    this._strategies$.next(this._cfg.customStrategies);\n\n    this.primaryStrategy = this.config.primaryStrategy;\n  }\n  /**\n   * @description\n   * Returns current `RxAngularConfig` used in the service.\n   * Config includes:\n   * - strategy that currently in use - `primaryStrategy`\n   * - array of custom user defined strategies - `customStrategies`\n   * - setting that is responsible for running in our outside of the zone.js - `patchZone`\n   */\n\n\n  get config() {\n    return this._cfg;\n  }\n  /**\n   * @description\n   * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n   */\n\n\n  get strategies() {\n    return this._strategies$.getValue();\n  }\n  /**\n   * @description\n   * Returns an array of strategy names available in the service.\n   */\n\n\n  get strategyNames() {\n    return Object.values(this.strategies).map(s => s.name);\n  }\n  /**\n   * @description\n   * Returns current strategy of the service.\n   */\n\n\n  get primaryStrategy() {\n    return this._primaryStrategy$.getValue().name;\n  }\n  /**\n   * @description\n   * Set's the strategy that will be used by the service.\n   */\n\n\n  set primaryStrategy(strategyName) {\n    this._primaryStrategy$.next(this.strategies[strategyName]);\n  }\n  /**\n   * @description\n   * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.\n   * - work is any function that should be executed\n   * - (optional) options includes strategy, patchZone and scope\n   *\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n   * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.\n   *\n   * @example\n   * myObservable$.pipe(\n   *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})\n   * ).subscribe();\n   *\n   * @return MonoTypeOperatorFunction<R>\n   */\n\n\n  scheduleWith(work, options) {\n    const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];\n    const scope = (options === null || options === void 0 ? void 0 : options.scope) || {};\n\n    const _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);\n\n    const ngZone = (options === null || options === void 0 ? void 0 : options.patchZone) || undefined;\n    return o$ => o$.pipe(switchMap(v => onStrategy(v, strategy, _v => {\n      _work(_v);\n    }, {\n      scope,\n      ngZone\n    })));\n  }\n  /**\n   * @description\n   * Allows to schedule a work as an observable. Accepts the work and configuration options object.\n   * - work is any function that should be executed\n   * - (optional) options includes strategy, patchZone and scope\n   *\n   * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n   * Scope setup is especially useful if you provide work that will trigger a change detection.\n   *\n   * @example\n   * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();\n   *\n   * @return Observable<R>\n   */\n\n\n  schedule(work, options) {\n    const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];\n    const scope = (options === null || options === void 0 ? void 0 : options.scope) || {};\n\n    const _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);\n\n    const ngZone = (options === null || options === void 0 ? void 0 : options.patchZone) || undefined;\n    let returnVal;\n    return onStrategy(null, strategy, () => {\n      returnVal = _work();\n    }, {\n      scope,\n      ngZone\n    }).pipe(map(() => returnVal));\n  }\n  /**\n   * @description\n   * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.\n   * Options include:\n   * - afterCD which is the work that should be executed after change detection cycle.\n   * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.\n   *\n   * @example\n   * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});\n   *\n   * @return AbortController\n   */\n\n\n  scheduleCD(cdRef, options) {\n    const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];\n    const scope = (options === null || options === void 0 ? void 0 : options.scope) || cdRef;\n    const abC = (options === null || options === void 0 ? void 0 : options.abortCtrl) || new AbortController();\n    const ngZone = (options === null || options === void 0 ? void 0 : options.patchZone) || undefined;\n    const work = getWork(() => {\n      strategy.work(cdRef, scope);\n\n      if (options === null || options === void 0 ? void 0 : options.afterCD) {\n        options.afterCD();\n      }\n    }, options.patchZone);\n    onStrategy(null, strategy, () => {\n      work();\n    }, {\n      scope,\n      ngZone\n    }).pipe(takeUntil(fromEvent(abC.signal, 'abort'))).subscribe();\n    return abC;\n  }\n\n}\n/** @nocollapse */\n\n\nRxStrategyProvider.ɵfac = function RxStrategyProvider_Factory(t) {\n  return new (t || RxStrategyProvider)(i0.ɵɵinject(RX_RENDER_STRATEGIES_CONFIG, 8));\n};\n/** @nocollapse */\n\n\nRxStrategyProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxStrategyProvider,\n  factory: RxStrategyProvider.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxStrategyProvider, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RX_RENDER_STRATEGIES_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nfunction getWork(work, patchZone) {\n  let _work = work;\n\n  if (patchZone) {\n    _work = args => patchZone.run(() => work(args));\n  }\n\n  return _work;\n}\n/**\n * @internal\n *\n * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`\n * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`\n *\n * @param defaultStrategyName\n * @param strategies\n */\n\n\nfunction strategyHandling(defaultStrategyName, strategies) {\n  const hotFlattened = coerceAllFactory(() => new ReplaySubject(1), switchAll());\n  return {\n    strategy$: hotFlattened.values$.pipe(startWith(defaultStrategyName), nameToStrategyCredentials(strategies, defaultStrategyName), share()),\n\n    next(name) {\n      hotFlattened.next(name);\n    }\n\n  };\n}\n/**\n * @internal\n */\n\n\nfunction nameToStrategyCredentials(strategies, defaultStrategyName) {\n  return o$ => o$.pipe(map(name => name && Object.keys(strategies).includes(name) ? strategies[name] : strategies[defaultStrategyName]));\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RX_CONCURRENT_STRATEGIES, RX_NATIVE_STRATEGIES, RX_RENDER_STRATEGIES_CONFIG, RxStrategyProvider, onStrategy, strategyHandling };","map":{"version":3,"names":["i0","NgZone","InjectionToken","Injectable","Optional","Inject","Observable","throwError","BehaviorSubject","fromEvent","ReplaySubject","filter","switchMap","mapTo","tap","catchError","map","take","shareReplay","takeUntil","switchAll","startWith","share","forceFrameRate","scheduleCallback","cancelCallback","coalescingManager","coalesceWith","getZoneUnPatchedApi","coerceAllFactory","immediateStrategy","name","work","cdRef","detectChanges","behavior","scope","ngZone","o$","pipe","scheduleOnQueue","priority","userBlockingStrategy","normalStrategy","lowStrategy","idleStrategy","options","isCoalescing","v","subscriber","add","task","remove","next","delay","RX_CONCURRENT_STRATEGIES","immediate","userBlocking","normal","low","idle","animationFrameTick","id","complete","localCredentials","_","notification","run","noopCredentials","nativeCredentials","markForCheck","isInAngularZone","globalCredentials","Object","assign","RX_NATIVE_STRATEGIES","global","native","noop","local","RX_RENDER_STRATEGIES_CONFIG","RX_RENDER_STRATEGIES_DEFAULTS","primaryStrategy","customStrategies","patchZone","parent","mergeDefaultConfig","cfg","custom","onStrategy","value","strategy","workFactory","error","RxStrategyProvider","constructor","_strategies$","undefined","_primaryStrategy$","primaryStrategy$","asObservable","strategies$","strategyNames$","strategies","values","s","bufferSize","refCount","_cfg","config","getValue","strategyNames","strategyName","scheduleWith","_work","getWork","_v","schedule","returnVal","scheduleCD","abC","abortCtrl","AbortController","afterCD","signal","subscribe","ɵfac","ɵprov","type","args","providedIn","decorators","strategyHandling","defaultStrategyName","hotFlattened","strategy$","values$","nameToStrategyCredentials","keys","includes"],"sources":["/home/bessam/Documents/Medisail/angular/angular interview/reactive-project-angular/node_modules/@rx-angular/cdk/fesm2015/cdk-render-strategies.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgZone, InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, throwError, BehaviorSubject, fromEvent, ReplaySubject } from 'rxjs';\nimport { filter, switchMap, mapTo, tap, catchError, map, take, shareReplay, takeUntil, switchAll, startWith, share } from 'rxjs/operators';\nimport { forceFrameRate, scheduleCallback, cancelCallback } from '@rx-angular/cdk/internals/scheduler';\nimport { coalescingManager, coalesceWith } from '@rx-angular/cdk/coalescing';\nimport { getZoneUnPatchedApi } from '@rx-angular/cdk/internals/core';\nimport { coerceAllFactory } from '@rx-angular/cdk/coercing';\n\n// set default to 60fps\nforceFrameRate(60);\nconst immediateStrategy = {\n    name: 'immediate',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 1 /* ImmediatePriority */,\n            scope,\n        }));\n    },\n};\nconst userBlockingStrategy = {\n    name: 'userBlocking',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 2 /* UserBlockingPriority */,\n            scope,\n        }));\n    },\n};\nconst normalStrategy = {\n    name: 'normal',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 3 /* NormalPriority */,\n            scope,\n        }));\n    },\n};\nconst lowStrategy = {\n    name: 'low',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 4 /* LowPriority */,\n            scope,\n        }));\n    },\n};\nconst idleStrategy = {\n    name: 'idle',\n    work: (cdRef) => cdRef.detectChanges(),\n    behavior: ({ work, scope, ngZone }) => {\n        return (o$) => o$.pipe(scheduleOnQueue(work, {\n            ngZone,\n            priority: 5 /* IdlePriority */,\n            scope,\n        }));\n    },\n};\nfunction scheduleOnQueue(work, options) {\n    const scope = options.scope || {};\n    return (o$) => o$.pipe(filter(() => !coalescingManager.isCoalescing(scope)), switchMap((v) => new Observable((subscriber) => {\n        coalescingManager.add(scope);\n        const task = scheduleCallback(options.priority, () => {\n            work();\n            coalescingManager.remove(scope);\n            subscriber.next(v);\n        }, { delay: options.delay, ngZone: options.ngZone });\n        return () => {\n            coalescingManager.remove(scope);\n            cancelCallback(task);\n        };\n    }).pipe(mapTo(v))));\n}\nconst RX_CONCURRENT_STRATEGIES = {\n    immediate: immediateStrategy,\n    userBlocking: userBlockingStrategy,\n    normal: normalStrategy,\n    low: lowStrategy,\n    idle: idleStrategy,\n};\n\nconst animationFrameTick = () => new Observable((subscriber) => {\n    // use the unpatched API no avoid zone interference\n    const id = getZoneUnPatchedApi('requestAnimationFrame')(() => {\n        subscriber.next(0);\n        subscriber.complete();\n    });\n    return () => {\n        // use the unpatched API no avoid zone interference\n        getZoneUnPatchedApi('cancelAnimationFrame')(id);\n    };\n});\nconst localCredentials = {\n    name: 'local',\n    work: (cdRef, _, notification) => {\n        cdRef.detectChanges();\n    },\n    behavior: ({ work, scope, ngZone }) => (o$) => o$.pipe(coalesceWith(animationFrameTick(), scope), tap(() => (ngZone ? ngZone.run(() => work()) : work()))),\n};\nconst noopCredentials = {\n    name: 'noop',\n    work: () => void 0,\n    behavior: () => (o$) => o$,\n};\nconst nativeCredentials = {\n    name: 'native',\n    work: (cdRef) => cdRef.markForCheck(),\n    behavior: ({ work, ngZone }) => (o$) => o$.pipe(tap(() => ngZone && !NgZone.isInAngularZone()\n        ? ngZone.run(() => work())\n        : work())),\n};\n/**\n * @deprecated\n * angular drops the internal markDirty API, will fall back to native if used\n */\nconst globalCredentials = Object.assign(Object.assign({}, nativeCredentials), { name: 'global' });\nconst RX_NATIVE_STRATEGIES = {\n    global: globalCredentials,\n    native: nativeCredentials,\n    noop: noopCredentials,\n    local: localCredentials,\n};\n\nconst RX_RENDER_STRATEGIES_CONFIG = new InjectionToken('rxa-render-strategies-config');\nconst RX_RENDER_STRATEGIES_DEFAULTS = {\n    primaryStrategy: 'normal',\n    customStrategies: Object.assign(Object.assign({}, RX_NATIVE_STRATEGIES), RX_CONCURRENT_STRATEGIES),\n    patchZone: true,\n    parent: true,\n};\nfunction mergeDefaultConfig(cfg) {\n    const custom = cfg\n        ? cfg\n        : {\n            customStrategies: {},\n        };\n    return Object.assign(Object.assign(Object.assign({}, RX_RENDER_STRATEGIES_DEFAULTS), custom), { customStrategies: Object.assign(Object.assign({}, custom.customStrategies), RX_RENDER_STRATEGIES_DEFAULTS.customStrategies) });\n}\n\n/**\n * @internal\n *\n * @param value\n * @param strategy\n * @param workFactory\n * @param options\n */\nfunction onStrategy(value, strategy, workFactory, options = {}) {\n    return new Observable((subscriber) => {\n        subscriber.next(value);\n    }).pipe(strategy.behavior({\n        work: () => workFactory(value, strategy.work, options),\n        scope: options.scope || {},\n        ngZone: options.ngZone,\n    }), catchError((error) => throwError(() => [error, value])), map(() => value), take(1));\n}\n\n/**\n * @description\n * RxStrategyProvider is a wrapper service that you can use to consume strategies and schedule your code execution.\n *\n * @example\n * Component({\n *   selector: 'app-service-communicator',\n *   template: ``\n * });\n * export class ServiceCommunicationComponent {\n *   private currentUserSettings;\n *\n *   constructor(\n *     private strategyProvider: RxStrategyProvider,\n *     private userService: UserService,\n *     private backgroundSync: BackgroundSyncService\n *   ) {\n *     this.userService.fetchCurrentUserSettings\n *       .pipe(\n *         tap(settings => (this.currentUserSettings = settings)),\n *         this.strategyProvider.scheduleWith(\n *           settings => this.backgroundSync.openConnection(settings),\n *           { strategy: 'idle' }\n *         )\n *       )\n *       .subscribe();\n *   }\n * }\n *\n * @docsCategory RxStrategyProvider\n * @docsPage RxStrategyProvider\n */\nclass RxStrategyProvider {\n    /**\n     * @internal\n     */\n    constructor(cfg) {\n        this._strategies$ = new BehaviorSubject(undefined);\n        this._primaryStrategy$ = new BehaviorSubject(undefined);\n        /**\n         * @description\n         * Current strategy of the service as an observable.\n         */\n        this.primaryStrategy$ = this._primaryStrategy$.asObservable();\n        /**\n         * @description\n         * Returns observable of an object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n         */\n        this.strategies$ = this._strategies$.asObservable();\n        /**\n         * @description\n         * Returns an observable of an array of strategy names available in the service.\n         */\n        this.strategyNames$ = this.strategies$.pipe(map((strategies) => Object.values(strategies).map((s) => s.name)), shareReplay({ bufferSize: 1, refCount: true }));\n        this._cfg = mergeDefaultConfig(cfg);\n        this._strategies$.next(this._cfg.customStrategies);\n        this.primaryStrategy = this.config.primaryStrategy;\n    }\n    /**\n     * @description\n     * Returns current `RxAngularConfig` used in the service.\n     * Config includes:\n     * - strategy that currently in use - `primaryStrategy`\n     * - array of custom user defined strategies - `customStrategies`\n     * - setting that is responsible for running in our outside of the zone.js - `patchZone`\n     */\n    get config() {\n        return this._cfg;\n    }\n    /**\n     * @description\n     * Returns object that contains key-value pairs of strategy names and their credentials (settings) that are available in the service.\n     */\n    get strategies() {\n        return this._strategies$.getValue();\n    }\n    /**\n     * @description\n     * Returns an array of strategy names available in the service.\n     */\n    get strategyNames() {\n        return Object.values(this.strategies).map((s) => s.name);\n    }\n    /**\n     * @description\n     * Returns current strategy of the service.\n     */\n    get primaryStrategy() {\n        return this._primaryStrategy$.getValue().name;\n    }\n    /**\n     * @description\n     * Set's the strategy that will be used by the service.\n     */\n    set primaryStrategy(strategyName) {\n        this._primaryStrategy$.next(this.strategies[strategyName]);\n    }\n    /**\n     * @description\n     * Allows to schedule a work inside rxjs `pipe`. Accepts the work and configuration options object.\n     * - work is any function that should be executed\n     * - (optional) options includes strategy, patchZone and scope\n     *\n     * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n     * Scope setup is useful if your work is some of the methods of `ChangeDetectorRef`. Only one change detection will be triggered if you have multiple schedules of change detection methods and scope is set to `this`.\n     *\n     * @example\n     * myObservable$.pipe(\n     *    this.strategyProvider.scheduleWith(() => myWork(), {strategy: 'idle', patchZone: false})\n     * ).subscribe();\n     *\n     * @return MonoTypeOperatorFunction<R>\n     */\n    scheduleWith(work, options) {\n        const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];\n        const scope = (options === null || options === void 0 ? void 0 : options.scope) || {};\n        const _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);\n        const ngZone = (options === null || options === void 0 ? void 0 : options.patchZone) || undefined;\n        return (o$) => o$.pipe(switchMap((v) => onStrategy(v, strategy, (_v) => {\n            _work(_v);\n        }, { scope, ngZone })));\n    }\n    /**\n     * @description\n     * Allows to schedule a work as an observable. Accepts the work and configuration options object.\n     * - work is any function that should be executed\n     * - (optional) options includes strategy, patchZone and scope\n     *\n     * Scope is by default a subscription but you can also pass `this` and then the scope will be current component.\n     * Scope setup is especially useful if you provide work that will trigger a change detection.\n     *\n     * @example\n     * this.strategyProvider.schedule(() => myWork(), {strategy: 'idle', patchZone: false}).subscribe();\n     *\n     * @return Observable<R>\n     */\n    schedule(work, options) {\n        const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];\n        const scope = (options === null || options === void 0 ? void 0 : options.scope) || {};\n        const _work = getWork(work, options === null || options === void 0 ? void 0 : options.patchZone);\n        const ngZone = (options === null || options === void 0 ? void 0 : options.patchZone) || undefined;\n        let returnVal;\n        return onStrategy(null, strategy, () => {\n            returnVal = _work();\n        }, { scope, ngZone }).pipe(map(() => returnVal));\n    }\n    /**\n     * @description\n     * Allows to schedule a change detection cycle. Accepts the ChangeDetectorRef and configuration options object.\n     * Options include:\n     * - afterCD which is the work that should be executed after change detection cycle.\n     * - abortCtrl is an AbortController that you can use to cancel the scheduled cycle.\n     *\n     * @example\n     * this.strategyProvider.scheduleCd(this.changeDetectorRef, {afterCD: myWork()});\n     *\n     * @return AbortController\n     */\n    scheduleCD(cdRef, options) {\n        const strategy = this.strategies[(options === null || options === void 0 ? void 0 : options.strategy) || this.primaryStrategy];\n        const scope = (options === null || options === void 0 ? void 0 : options.scope) || cdRef;\n        const abC = (options === null || options === void 0 ? void 0 : options.abortCtrl) || new AbortController();\n        const ngZone = (options === null || options === void 0 ? void 0 : options.patchZone) || undefined;\n        const work = getWork(() => {\n            strategy.work(cdRef, scope);\n            if (options === null || options === void 0 ? void 0 : options.afterCD) {\n                options.afterCD();\n            }\n        }, options.patchZone);\n        onStrategy(null, strategy, () => {\n            work();\n        }, { scope, ngZone })\n            .pipe(takeUntil(fromEvent(abC.signal, 'abort')))\n            .subscribe();\n        return abC;\n    }\n}\n/** @nocollapse */ RxStrategyProvider.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: RxStrategyProvider, deps: [{ token: RX_RENDER_STRATEGIES_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ RxStrategyProvider.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: RxStrategyProvider, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: RxStrategyProvider, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [RX_RENDER_STRATEGIES_CONFIG]\n                }] }]; } });\nfunction getWork(work, patchZone) {\n    let _work = work;\n    if (patchZone) {\n        _work = (args) => patchZone.run(() => work(args));\n    }\n    return _work;\n}\n\n/**\n * @internal\n *\n * A factory function returning an object to handle the process of turning strategy names into `RxStrategyCredentials`\n * You can next a strategy name as Observable or string and get an Observable of `RxStrategyCredentials`\n *\n * @param defaultStrategyName\n * @param strategies\n */\nfunction strategyHandling(defaultStrategyName, strategies) {\n    const hotFlattened = coerceAllFactory(() => new ReplaySubject(1), switchAll());\n    return {\n        strategy$: hotFlattened.values$.pipe(startWith(defaultStrategyName), nameToStrategyCredentials(strategies, defaultStrategyName), share()),\n        next(name) {\n            hotFlattened.next(name);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction nameToStrategyCredentials(strategies, defaultStrategyName) {\n    return (o$) => o$.pipe(map((name) => name && Object.keys(strategies).includes(name)\n        ? strategies[name]\n        : strategies[defaultStrategyName]));\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_CONCURRENT_STRATEGIES, RX_NATIVE_STRATEGIES, RX_RENDER_STRATEGIES_CONFIG, RxStrategyProvider, onStrategy, strategyHandling };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,UAAjC,EAA6CC,QAA7C,EAAuDC,MAAvD,QAAqE,eAArE;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,eAAjC,EAAkDC,SAAlD,EAA6DC,aAA7D,QAAkF,MAAlF;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,UAAxC,EAAoDC,GAApD,EAAyDC,IAAzD,EAA+DC,WAA/D,EAA4EC,SAA5E,EAAuFC,SAAvF,EAAkGC,SAAlG,EAA6GC,KAA7G,QAA0H,gBAA1H;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,cAA3C,QAAiE,qCAAjE;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,4BAAhD;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,gBAAT,QAAiC,0BAAjC,C,CAEA;;AACAN,cAAc,CAAC,EAAD,CAAd;AACA,MAAMO,iBAAiB,GAAG;EACtBC,IAAI,EAAE,WADgB;EAEtBC,IAAI,EAAGC,KAAD,IAAWA,KAAK,CAACC,aAAN,EAFK;EAGtBC,QAAQ,EAAE,CAAC;IAAEH,IAAF;IAAQI,KAAR;IAAeC;EAAf,CAAD,KAA6B;IACnC,OAAQC,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQC,eAAe,CAACR,IAAD,EAAO;MACzCK,MADyC;MAEzCI,QAAQ,EAAE;MAAE;MAF6B;MAGzCL;IAHyC,CAAP,CAAvB,CAAf;EAKH;AATqB,CAA1B;AAWA,MAAMM,oBAAoB,GAAG;EACzBX,IAAI,EAAE,cADmB;EAEzBC,IAAI,EAAGC,KAAD,IAAWA,KAAK,CAACC,aAAN,EAFQ;EAGzBC,QAAQ,EAAE,CAAC;IAAEH,IAAF;IAAQI,KAAR;IAAeC;EAAf,CAAD,KAA6B;IACnC,OAAQC,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQC,eAAe,CAACR,IAAD,EAAO;MACzCK,MADyC;MAEzCI,QAAQ,EAAE;MAAE;MAF6B;MAGzCL;IAHyC,CAAP,CAAvB,CAAf;EAKH;AATwB,CAA7B;AAWA,MAAMO,cAAc,GAAG;EACnBZ,IAAI,EAAE,QADa;EAEnBC,IAAI,EAAGC,KAAD,IAAWA,KAAK,CAACC,aAAN,EAFE;EAGnBC,QAAQ,EAAE,CAAC;IAAEH,IAAF;IAAQI,KAAR;IAAeC;EAAf,CAAD,KAA6B;IACnC,OAAQC,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQC,eAAe,CAACR,IAAD,EAAO;MACzCK,MADyC;MAEzCI,QAAQ,EAAE;MAAE;MAF6B;MAGzCL;IAHyC,CAAP,CAAvB,CAAf;EAKH;AATkB,CAAvB;AAWA,MAAMQ,WAAW,GAAG;EAChBb,IAAI,EAAE,KADU;EAEhBC,IAAI,EAAGC,KAAD,IAAWA,KAAK,CAACC,aAAN,EAFD;EAGhBC,QAAQ,EAAE,CAAC;IAAEH,IAAF;IAAQI,KAAR;IAAeC;EAAf,CAAD,KAA6B;IACnC,OAAQC,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQC,eAAe,CAACR,IAAD,EAAO;MACzCK,MADyC;MAEzCI,QAAQ,EAAE;MAAE;MAF6B;MAGzCL;IAHyC,CAAP,CAAvB,CAAf;EAKH;AATe,CAApB;AAWA,MAAMS,YAAY,GAAG;EACjBd,IAAI,EAAE,MADW;EAEjBC,IAAI,EAAGC,KAAD,IAAWA,KAAK,CAACC,aAAN,EAFA;EAGjBC,QAAQ,EAAE,CAAC;IAAEH,IAAF;IAAQI,KAAR;IAAeC;EAAf,CAAD,KAA6B;IACnC,OAAQC,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQC,eAAe,CAACR,IAAD,EAAO;MACzCK,MADyC;MAEzCI,QAAQ,EAAE;MAAE;MAF6B;MAGzCL;IAHyC,CAAP,CAAvB,CAAf;EAKH;AATgB,CAArB;;AAWA,SAASI,eAAT,CAAyBR,IAAzB,EAA+Bc,OAA/B,EAAwC;EACpC,MAAMV,KAAK,GAAGU,OAAO,CAACV,KAAR,IAAiB,EAA/B;EACA,OAAQE,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQ5B,MAAM,CAAC,MAAM,CAACe,iBAAiB,CAACqB,YAAlB,CAA+BX,KAA/B,CAAR,CAAd,EAA8DxB,SAAS,CAAEoC,CAAD,IAAO,IAAI1C,UAAJ,CAAgB2C,UAAD,IAAgB;IACzHvB,iBAAiB,CAACwB,GAAlB,CAAsBd,KAAtB;IACA,MAAMe,IAAI,GAAG3B,gBAAgB,CAACsB,OAAO,CAACL,QAAT,EAAmB,MAAM;MAClDT,IAAI;MACJN,iBAAiB,CAAC0B,MAAlB,CAAyBhB,KAAzB;MACAa,UAAU,CAACI,IAAX,CAAgBL,CAAhB;IACH,CAJ4B,EAI1B;MAAEM,KAAK,EAAER,OAAO,CAACQ,KAAjB;MAAwBjB,MAAM,EAAES,OAAO,CAACT;IAAxC,CAJ0B,CAA7B;IAKA,OAAO,MAAM;MACTX,iBAAiB,CAAC0B,MAAlB,CAAyBhB,KAAzB;MACAX,cAAc,CAAC0B,IAAD,CAAd;IACH,CAHD;EAIH,CAX6F,EAW3FZ,IAX2F,CAWtF1B,KAAK,CAACmC,CAAD,CAXiF,CAAR,CAAvE,CAAf;AAYH;;AACD,MAAMO,wBAAwB,GAAG;EAC7BC,SAAS,EAAE1B,iBADkB;EAE7B2B,YAAY,EAAEf,oBAFe;EAG7BgB,MAAM,EAAEf,cAHqB;EAI7BgB,GAAG,EAAEf,WAJwB;EAK7BgB,IAAI,EAAEf;AALuB,CAAjC;;AAQA,MAAMgB,kBAAkB,GAAG,MAAM,IAAIvD,UAAJ,CAAgB2C,UAAD,IAAgB;EAC5D;EACA,MAAMa,EAAE,GAAGlC,mBAAmB,CAAC,uBAAD,CAAnB,CAA6C,MAAM;IAC1DqB,UAAU,CAACI,IAAX,CAAgB,CAAhB;IACAJ,UAAU,CAACc,QAAX;EACH,CAHU,CAAX;EAIA,OAAO,MAAM;IACT;IACAnC,mBAAmB,CAAC,sBAAD,CAAnB,CAA4CkC,EAA5C;EACH,CAHD;AAIH,CAVgC,CAAjC;;AAWA,MAAME,gBAAgB,GAAG;EACrBjC,IAAI,EAAE,OADe;EAErBC,IAAI,EAAE,CAACC,KAAD,EAAQgC,CAAR,EAAWC,YAAX,KAA4B;IAC9BjC,KAAK,CAACC,aAAN;EACH,CAJoB;EAKrBC,QAAQ,EAAE,CAAC;IAAEH,IAAF;IAAQI,KAAR;IAAeC;EAAf,CAAD,KAA8BC,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQZ,YAAY,CAACkC,kBAAkB,EAAnB,EAAuBzB,KAAvB,CAApB,EAAmDtB,GAAG,CAAC,MAAOuB,MAAM,GAAGA,MAAM,CAAC8B,GAAP,CAAW,MAAMnC,IAAI,EAArB,CAAH,GAA8BA,IAAI,EAAhD,CAAtD;AAL1B,CAAzB;AAOA,MAAMoC,eAAe,GAAG;EACpBrC,IAAI,EAAE,MADc;EAEpBC,IAAI,EAAE,MAAM,KAAK,CAFG;EAGpBG,QAAQ,EAAE,MAAOG,EAAD,IAAQA;AAHJ,CAAxB;AAKA,MAAM+B,iBAAiB,GAAG;EACtBtC,IAAI,EAAE,QADgB;EAEtBC,IAAI,EAAGC,KAAD,IAAWA,KAAK,CAACqC,YAAN,EAFK;EAGtBnC,QAAQ,EAAE,CAAC;IAAEH,IAAF;IAAQK;EAAR,CAAD,KAAuBC,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQzB,GAAG,CAAC,MAAMuB,MAAM,IAAI,CAACpC,MAAM,CAACsE,eAAP,EAAX,GACpDlC,MAAM,CAAC8B,GAAP,CAAW,MAAMnC,IAAI,EAArB,CADoD,GAEpDA,IAAI,EAFyC,CAAX;AAHlB,CAA1B;AAOA;AACA;AACA;AACA;;AACA,MAAMwC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,iBAAlB,CAAd,EAAoD;EAAEtC,IAAI,EAAE;AAAR,CAApD,CAA1B;AACA,MAAM4C,oBAAoB,GAAG;EACzBC,MAAM,EAAEJ,iBADiB;EAEzBK,MAAM,EAAER,iBAFiB;EAGzBS,IAAI,EAAEV,eAHmB;EAIzBW,KAAK,EAAEf;AAJkB,CAA7B;AAOA,MAAMgB,2BAA2B,GAAG,IAAI9E,cAAJ,CAAmB,8BAAnB,CAApC;AACA,MAAM+E,6BAA6B,GAAG;EAClCC,eAAe,EAAE,QADiB;EAElCC,gBAAgB,EAAEV,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,oBAAlB,CAAd,EAAuDpB,wBAAvD,CAFgB;EAGlC6B,SAAS,EAAE,IAHuB;EAIlCC,MAAM,EAAE;AAJ0B,CAAtC;;AAMA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;EAC7B,MAAMC,MAAM,GAAGD,GAAG,GACZA,GADY,GAEZ;IACEJ,gBAAgB,EAAE;EADpB,CAFN;EAKA,OAAOV,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBO,6BAAlB,CAAd,EAAgEO,MAAhE,CAAd,EAAuF;IAAEL,gBAAgB,EAAEV,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBc,MAAM,CAACL,gBAAzB,CAAd,EAA0DF,6BAA6B,CAACE,gBAAxF;EAApB,CAAvF,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,UAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAkD9C,OAAO,GAAG,EAA5D,EAAgE;EAC5D,OAAO,IAAIxC,UAAJ,CAAgB2C,UAAD,IAAgB;IAClCA,UAAU,CAACI,IAAX,CAAgBqC,KAAhB;EACH,CAFM,EAEJnD,IAFI,CAECoD,QAAQ,CAACxD,QAAT,CAAkB;IACtBH,IAAI,EAAE,MAAM4D,WAAW,CAACF,KAAD,EAAQC,QAAQ,CAAC3D,IAAjB,EAAuBc,OAAvB,CADD;IAEtBV,KAAK,EAAEU,OAAO,CAACV,KAAR,IAAiB,EAFF;IAGtBC,MAAM,EAAES,OAAO,CAACT;EAHM,CAAlB,CAFD,EAMHtB,UAAU,CAAE8E,KAAD,IAAWtF,UAAU,CAAC,MAAM,CAACsF,KAAD,EAAQH,KAAR,CAAP,CAAtB,CANP,EAMsD1E,GAAG,CAAC,MAAM0E,KAAP,CANzD,EAMwEzE,IAAI,CAAC,CAAD,CAN5E,CAAP;AAOH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM6E,kBAAN,CAAyB;EACrB;AACJ;AACA;EACIC,WAAW,CAACR,GAAD,EAAM;IACb,KAAKS,YAAL,GAAoB,IAAIxF,eAAJ,CAAoByF,SAApB,CAApB;IACA,KAAKC,iBAAL,GAAyB,IAAI1F,eAAJ,CAAoByF,SAApB,CAAzB;IACA;AACR;AACA;AACA;;IACQ,KAAKE,gBAAL,GAAwB,KAAKD,iBAAL,CAAuBE,YAAvB,EAAxB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,WAAL,GAAmB,KAAKL,YAAL,CAAkBI,YAAlB,EAAnB;IACA;AACR;AACA;AACA;;IACQ,KAAKE,cAAL,GAAsB,KAAKD,WAAL,CAAiB9D,IAAjB,CAAsBvB,GAAG,CAAEuF,UAAD,IAAgB9B,MAAM,CAAC+B,MAAP,CAAcD,UAAd,EAA0BvF,GAA1B,CAA+ByF,CAAD,IAAOA,CAAC,CAAC1E,IAAvC,CAAjB,CAAzB,EAAyFb,WAAW,CAAC;MAAEwF,UAAU,EAAE,CAAd;MAAiBC,QAAQ,EAAE;IAA3B,CAAD,CAApG,CAAtB;IACA,KAAKC,IAAL,GAAYtB,kBAAkB,CAACC,GAAD,CAA9B;;IACA,KAAKS,YAAL,CAAkB3C,IAAlB,CAAuB,KAAKuD,IAAL,CAAUzB,gBAAjC;;IACA,KAAKD,eAAL,GAAuB,KAAK2B,MAAL,CAAY3B,eAAnC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACc,IAAN2B,MAAM,GAAG;IACT,OAAO,KAAKD,IAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACkB,IAAVL,UAAU,GAAG;IACb,OAAO,KAAKP,YAAL,CAAkBc,QAAlB,EAAP;EACH;EACD;AACJ;AACA;AACA;;;EACqB,IAAbC,aAAa,GAAG;IAChB,OAAOtC,MAAM,CAAC+B,MAAP,CAAc,KAAKD,UAAnB,EAA+BvF,GAA/B,CAAoCyF,CAAD,IAAOA,CAAC,CAAC1E,IAA5C,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACuB,IAAfmD,eAAe,GAAG;IAClB,OAAO,KAAKgB,iBAAL,CAAuBY,QAAvB,GAAkC/E,IAAzC;EACH;EACD;AACJ;AACA;AACA;;;EACuB,IAAfmD,eAAe,CAAC8B,YAAD,EAAe;IAC9B,KAAKd,iBAAL,CAAuB7C,IAAvB,CAA4B,KAAKkD,UAAL,CAAgBS,YAAhB,CAA5B;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,YAAY,CAACjF,IAAD,EAAOc,OAAP,EAAgB;IACxB,MAAM6C,QAAQ,GAAG,KAAKY,UAAL,CAAgB,CAACzD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAAC6C,QAA3D,KAAwE,KAAKT,eAA7F,CAAjB;IACA,MAAM9C,KAAK,GAAG,CAACU,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACV,KAA3D,KAAqE,EAAnF;;IACA,MAAM8E,KAAK,GAAGC,OAAO,CAACnF,IAAD,EAAOc,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsC,SAAjE,CAArB;;IACA,MAAM/C,MAAM,GAAG,CAACS,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsC,SAA3D,KAAyEa,SAAxF;IACA,OAAQ3D,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQ3B,SAAS,CAAEoC,CAAD,IAAOyC,UAAU,CAACzC,CAAD,EAAI2C,QAAJ,EAAeyB,EAAD,IAAQ;MACpEF,KAAK,CAACE,EAAD,CAAL;IACH,CAFiD,EAE/C;MAAEhF,KAAF;MAASC;IAAT,CAF+C,CAAlB,CAAjB,CAAf;EAGH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIgF,QAAQ,CAACrF,IAAD,EAAOc,OAAP,EAAgB;IACpB,MAAM6C,QAAQ,GAAG,KAAKY,UAAL,CAAgB,CAACzD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAAC6C,QAA3D,KAAwE,KAAKT,eAA7F,CAAjB;IACA,MAAM9C,KAAK,GAAG,CAACU,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACV,KAA3D,KAAqE,EAAnF;;IACA,MAAM8E,KAAK,GAAGC,OAAO,CAACnF,IAAD,EAAOc,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsC,SAAjE,CAArB;;IACA,MAAM/C,MAAM,GAAG,CAACS,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsC,SAA3D,KAAyEa,SAAxF;IACA,IAAIqB,SAAJ;IACA,OAAO7B,UAAU,CAAC,IAAD,EAAOE,QAAP,EAAiB,MAAM;MACpC2B,SAAS,GAAGJ,KAAK,EAAjB;IACH,CAFgB,EAEd;MAAE9E,KAAF;MAASC;IAAT,CAFc,CAAV,CAEeE,IAFf,CAEoBvB,GAAG,CAAC,MAAMsG,SAAP,CAFvB,CAAP;EAGH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,UAAU,CAACtF,KAAD,EAAQa,OAAR,EAAiB;IACvB,MAAM6C,QAAQ,GAAG,KAAKY,UAAL,CAAgB,CAACzD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAAC6C,QAA3D,KAAwE,KAAKT,eAA7F,CAAjB;IACA,MAAM9C,KAAK,GAAG,CAACU,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACV,KAA3D,KAAqEH,KAAnF;IACA,MAAMuF,GAAG,GAAG,CAAC1E,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAAC2E,SAA3D,KAAyE,IAAIC,eAAJ,EAArF;IACA,MAAMrF,MAAM,GAAG,CAACS,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsC,SAA3D,KAAyEa,SAAxF;IACA,MAAMjE,IAAI,GAAGmF,OAAO,CAAC,MAAM;MACvBxB,QAAQ,CAAC3D,IAAT,CAAcC,KAAd,EAAqBG,KAArB;;MACA,IAAIU,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAAC6E,OAA9D,EAAuE;QACnE7E,OAAO,CAAC6E,OAAR;MACH;IACJ,CALmB,EAKjB7E,OAAO,CAACsC,SALS,CAApB;IAMAK,UAAU,CAAC,IAAD,EAAOE,QAAP,EAAiB,MAAM;MAC7B3D,IAAI;IACP,CAFS,EAEP;MAAEI,KAAF;MAASC;IAAT,CAFO,CAAV,CAGKE,IAHL,CAGUpB,SAAS,CAACV,SAAS,CAAC+G,GAAG,CAACI,MAAL,EAAa,OAAb,CAAV,CAHnB,EAIKC,SAJL;IAKA,OAAOL,GAAP;EACH;;AA/IoB;AAiJzB;;;AAAmB1B,kBAAkB,CAACgC,IAAnB;EAAA,iBAAgHhC,kBAAhH,EAAsG9F,EAAtG,UAAoJgF,2BAApJ;AAAA;AACnB;;;AAAmBc,kBAAkB,CAACiC,KAAnB,kBADsG/H,EACtG;EAAA,OAAoH8F,kBAApH;EAAA,SAAoHA,kBAApH;EAAA,YAAoJ;AAApJ;;AACnB;EAAA,mDAFyH9F,EAEzH,mBAA4F8F,kBAA5F,EAA4H,CAAC;IACjHkC,IAAI,EAAE7H,UAD2G;IAEjH8H,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAd,CAAD;EAF2G,CAAD,CAA5H,EAG4B,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAE/B,SAAR;MAAmBkC,UAAU,EAAE,CAAC;QAC9DH,IAAI,EAAE5H;MADwD,CAAD,EAE9D;QACC4H,IAAI,EAAE3H,MADP;QAEC4H,IAAI,EAAE,CAACjD,2BAAD;MAFP,CAF8D;IAA/B,CAAD,CAAP;EAKlB,CARxB;AAAA;;AASA,SAASmC,OAAT,CAAiBnF,IAAjB,EAAuBoD,SAAvB,EAAkC;EAC9B,IAAI8B,KAAK,GAAGlF,IAAZ;;EACA,IAAIoD,SAAJ,EAAe;IACX8B,KAAK,GAAIe,IAAD,IAAU7C,SAAS,CAACjB,GAAV,CAAc,MAAMnC,IAAI,CAACiG,IAAD,CAAxB,CAAlB;EACH;;EACD,OAAOf,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,gBAAT,CAA0BC,mBAA1B,EAA+C9B,UAA/C,EAA2D;EACvD,MAAM+B,YAAY,GAAGzG,gBAAgB,CAAC,MAAM,IAAInB,aAAJ,CAAkB,CAAlB,CAAP,EAA6BU,SAAS,EAAtC,CAArC;EACA,OAAO;IACHmH,SAAS,EAAED,YAAY,CAACE,OAAb,CAAqBjG,IAArB,CAA0BlB,SAAS,CAACgH,mBAAD,CAAnC,EAA0DI,yBAAyB,CAAClC,UAAD,EAAa8B,mBAAb,CAAnF,EAAsH/G,KAAK,EAA3H,CADR;;IAEH+B,IAAI,CAACtB,IAAD,EAAO;MACPuG,YAAY,CAACjF,IAAb,CAAkBtB,IAAlB;IACH;;EAJE,CAAP;AAMH;AACD;AACA;AACA;;;AACA,SAAS0G,yBAAT,CAAmClC,UAAnC,EAA+C8B,mBAA/C,EAAoE;EAChE,OAAQ/F,EAAD,IAAQA,EAAE,CAACC,IAAH,CAAQvB,GAAG,CAAEe,IAAD,IAAUA,IAAI,IAAI0C,MAAM,CAACiE,IAAP,CAAYnC,UAAZ,EAAwBoC,QAAxB,CAAiC5G,IAAjC,CAAR,GAC/BwE,UAAU,CAACxE,IAAD,CADqB,GAE/BwE,UAAU,CAAC8B,mBAAD,CAFU,CAAX,CAAf;AAGH;AAED;AACA;AACA;;;AAEA,SAAS9E,wBAAT,EAAmCoB,oBAAnC,EAAyDK,2BAAzD,EAAsFc,kBAAtF,EAA0GL,UAA1G,EAAsH2C,gBAAtH"},"metadata":{},"sourceType":"module"}